A: NPM 相关知识及安装NPM淘宝镜像。

1, NPM
NPM（node package manager）:node的包管理工具.顾名思义，它的主要功能就是管理node包，

包括：安装、卸载、更新、查看、搜索、发布等。

npm的背后，是基于couchdb的一个数据库，详细记录了每个包的信息，

包括作者、版本、依赖、授权信息等。它的一个很重要的作用就是：

将开发者从繁琐的包管理工作（版本、依赖等）中解放出来，更加专注于功能的开发。

2, install the taobao mirror 

2.1 npm install -g cnpm --registry=https://registry.npm.taobao.org

2.2 cnpm install git+https://github.com/vuematerial/vue-material.git

2.3 cnpm install vue@^2.5.0


B: webpack 安装及helloworld入门知识

官方介绍及参考文献：

https://webpack.js.org/concepts/targets/#usage
https://segmentfault.com/a/1190000006178770

https://segmentfault.com/a/1190000012789253 (vue+webpack)
1, global install

$npm install -g webpack

2, //安装到你的项目目录
npm install --save-dev webpack


注意，安装到项目目录后， 产生一个node_module/.bin 目录，webpack工具全部在里面。
/Users/zhangxiao/eclipse-workspace/webpack/node_modules/.bin


3, 初始化项目 

cd /Users/zhangxiao/eclipse-workspace/webpack 
npm init

执行完毕，产生一个名为：package.json 文件。
文件内容如下：

 {
  "name": "webpack-sample",
  "version": "1.0.0",
  "description": "a demo for webpack",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "alan",
  "license": "ISC"
}

4, 在本项目中安装Webpack作为依赖包

$npm install --save-dev webpack
运行完后，在项目的工程目录下生成了一个node_modules文件夹和package-lock.json文件。
其中，package-lock.json文件中内容均是 node_modules文件夹下的模块依赖包：
如：

"yallist": {
      "version": "3.0.3",
      "resolved": "http://registry.npm.taobao.org/yallist/download/yallist-3.0.3.tgz",
      "integrity": "sha1-tLBJ4xS+VF486AIjbWzSLNkcPek=",
      "dev": true
    }

5, 创建app, public 两个folder, app 中存放js文件， 
6，创建index.html, Greetter.js, Main.js

(1) index.html 文件如下： 
<!-- index.html -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8">
    <title>Webpack Sample Project</title>
  </head>
  <body>
    <div id='root'>
    </div>
    <script src="bundle.js"></script>
  </body>
</html>

(2) Greeter.js

module.exports = function() {
  var greet = document.createElement('div');
  greet.textContent = "Hi there and greetings!";
  return greet;
};


(3) main.js

const greeter = require('./Greeter.js');
document.querySelector("#root").appendChild(greeter());

 7, webpack 打包项目 
 
 
 $cd /Users/zhangxiao/eclipse-workspace/webpack/
 
 $node_modules/.bin/webpack app/main.js -o public/bundle.js --mode=production
 
  运行打包命令后，可以看见，public目录下生成了一个bundle.js 文件。
 
 
 浏览器访问： index.html 
 
 C: 使用webpack.config.js 配置，无需要命令行打包：
 
 1, webpack.config.js 文件如下：
 
 module.exports = {
  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件
  output: {
    path: __dirname + "/public",//打包后的文件存放的地方
    filename: "bundle.js"//打包后输出文件的文件名
  }
}
 
 或者官方的示例：
 
const path = require('path');
module.exports = {
  entry: __dirname + "/app/main.js",
  output: {
    path: path.resolve(__dirname, 'dist'),
    filename: 'bundle.js'
  }
};
 
 
 
 注：
  entry:__dirname+"/app/main.js" 
  是
  entry: {
    main: __dirname+"/app/main.js" 
  } 的简写。
  
  (1) __dirname: node.js中的一个全局变量，它指向当前执行脚本所在的目录。
  (2) entry: 唯一入口文件,默认的index.js 文件
  (3) output: 打包后的文件存放的地方
  (4) filename: 打包后输出文件的文件名
  
  (5) Loaders: 出了容器，webpack只能理解JavaScript 和 JSON 文件。
           Loaders允许webpack处理别的类型的文件，并把它们转换成能够被应用消费的合法模块。
           加入到别的依赖中。Loaders有test, use两个属性
  
            The test property identifies which file or files should be transformed.
             The use property indicates which loader should be used to do the transforming.

  实例1： 使用css-loader处理.css文件。使用ts-loader处理.ts文件。
  module.exports = {
  module: {
    rules: [
      {test: /\.css$/, use: 'css-loader'},
      {test: /\.ts$/, use: 'ts-loader'}
    ]
  }
};
  
  实例2：官方：
  
const path = require('path');
module.exports = {
  output: {
    filename: 'my-first-webpack.bundle.js'
  },
  module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  }
};
  
 说明： 当你使用 require()/import 声明一个txt文件时 ，在将文件加到bundle之前，使用 raw-loader转换。

 在webpack.config.js文件中配置打包的益处在于，出异常时会产生警告。  
 
 
 (6) Plugins:
 
 
 
const HtmlWebpackPlugin = require('html-webpack-plugin'); //installed via npm
const webpack = require('webpack'); //to access built-in plugins

module.exports = {
  module: {
    rules: [
      { test: /\.txt$/, use: 'raw-loader' }
    ]
  },
  plugins: [
    new HtmlWebpackPlugin({template: './src/index.html'})
  ]
};

上面的例子, html-webpack-plugin通过自动注入你所生成的bundle生成HTML文件。

(7)mode : production|development|none

module.exports = {
  mode: 'production'
};
 
 2, 直接运行： 
 $cd /Users/zhangxiao/eclipse-workspace/webpack/
 
 $node_modules/.bin/webpack --mode=production
 
 D, npm start 打包 webpack 
 
 1,  修改 package.json , 修改： "scripts": { "start": "webpack" }
 
 {
  "name": "webpack-sample",
  "version": "1.0.0",
  "description": "a demo for webpack",
  "main": "index.js",
  "scripts": {
    "start": "webpack" 
  },
  "author": "alan",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^4.29.6",
    "webpack-cli": "^3.3.0"
  }
     
}
 
 2，执行： $ npm start
 
 
 E, webpack 的调试功能 
 
 devtool: 'eval-source-map'
 cheap-module-eval-source-map方法构建速度更快，但是不利于调试，推荐在大型项目考虑时间成本时使用。
 
 1，修改 webpack.config.js
 
 module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件
  output: {
    path: __dirname + "/public",//打包后的文件存放的地方
    filename: "bundle.js"//打包后输出文件的文件名
    
  },
  mode: 'production'
}
 
 2, 使用webpack构建本地服务器
 
$ npm install --save-dev webpack-dev-server


3, 修改配置文件webpack.config.js

module.exports = {
  devtool: 'eval-source-map',
  entry:  __dirname + "/app/main.js",//已多次提及的唯一入口文件
  output: {
    path: __dirname + "/public",//打包后的文件存放的地方
    filename: "bundle.js"//打包后输出文件的文件名
    
  },
  mode: 'production',
  
  devServer: {
	    contentBase: "./public",//本地服务器所加载的页面所在的目录
	    historyApiFallback: true,//不跳转
	    inline: true//实时刷新
	} 
  
}

4, 在package.json中的scripts对象中添加如下命令，用以开启本地服务器：
    "server": "webpack-dev-server --open"
新的内容如下：
{
  "name": "webpack-sample",
  "version": "1.0.0",
  "description": "a demo for webpack",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1",
    "start": "webpack",
    "server": "webpack-dev-server --open"
  },
  "author": "alan",
  "license": "ISC",
  "devDependencies": {
    "webpack": "^4.29.6",
    "webpack-cli": "^3.3.0"
  }
  
     
}
 
 
 
 
 
 
 
 
  
  